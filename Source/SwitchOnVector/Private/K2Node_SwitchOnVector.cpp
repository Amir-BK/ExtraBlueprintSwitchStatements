// Fill out your copyright notice in the Description page of Project Settings.


#include "K2Node_SwitchOnVector.h"
#include "BlueprintActionDatabaseRegistrar.h"
#include "BlueprintNodeSpawner.h"
#include "EdGraph/EdGraph.h"
#include "EdGraphSchema_K2.h"




UK2Node_SwitchOnVector::UK2Node_SwitchOnVector()
{
	//bHasDefaultPin = false;
	FunctionName = TEXT("IsVectorNearlyEqual");
	FunctionClass = UK2Node_SwitchOnVector::StaticClass();
}

void UK2Node_SwitchOnVector::GetMenuActions(FBlueprintActionDatabaseRegistrar& ActionRegistrar) const
{
    UClass* ActionKey = GetClass();
    if (ActionRegistrar.IsOpenForRegistration(ActionKey))
    {
        UBlueprintNodeSpawner* NodeSpawner = UBlueprintNodeSpawner::Create(GetClass());
        check(NodeSpawner);

        ActionRegistrar.AddBlueprintAction(ActionKey, NodeSpawner);
    }
}

FText UK2Node_SwitchOnVector::GetNodeTitle(ENodeTitleType::Type TitleType) const
{
    return NSLOCTEXT("K2Node", "Switch_Vector", "Switch on Vector");

}

bool UK2Node_SwitchOnVector::IsVectorNearlyEqual(FVector A, FVector B)
{
    return FVector::PointsAreNear(A, B, Tolerance);
}

void UK2Node_SwitchOnVector::CreateSelectionPin()
{

        UEdGraphPin* Pin = CreatePin(EGPD_Input, UEdGraphSchema_K2::PC_Struct, TBaseStructure<FVector>::Get(), TEXT("Selection"));
        GetDefault<UEdGraphSchema_K2>()->SetPinAutogeneratedDefaultValueBasedOnType(Pin);

}

void UK2Node_SwitchOnVector::AddPinToSwitchNode()
{
    const FName PinName = GetUniquePinName();
    PinNames.Add(PinName);

    UEdGraphPin* Pin = CreatePin(EGPD_Output, UEdGraphSchema_K2::PC_Exec, PinName);
    Pin->bAllowFriendlyName = false;
}

FEdGraphPinType UK2Node_SwitchOnVector::GetPinType() const
{
    FEdGraphPinType PinType;
	PinType.PinCategory = UEdGraphSchema_K2::PC_Struct;
	PinType.PinSubCategoryObject = TBaseStructure<FVector>::Get();
	return PinType;
}

void UK2Node_SwitchOnVector::CreateCasePins()
{
    for (const FVector& PinValue : PinValues)
    {
		const FName PinName = GetUniquePinName();
		PinNames.Add(PinName);

		UEdGraphPin* Pin = CreatePin(EGPD_Output, UEdGraphSchema_K2::PC_Exec, PinName);
		Pin->bAllowFriendlyName = false;
	}
}

FName UK2Node_SwitchOnVector::GetUniquePinName()
{
    FName NewPinName;
    int32 Index = 0;
    while (true)
    {
        NewPinName = *FString::Printf(TEXT("Case_%d"), Index++);
        if (!FindPin(NewPinName))
        {
            break;
        }
    }
    return NewPinName;
}

void UK2Node_SwitchOnVector::PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)
{
    ReconstructNode();
    Super::PostEditChangeProperty(PropertyChangedEvent);
}
